OVERVIEW

This is the repo for the cloud-analytics project, including agents, daemons,
libraries, etc.  Project lead is Dave Pacheco (dap@joyent.com).

Subdirectories in this repo include:

build	(auto-generated by "gmake install")
	root/		(proto) subdirectory mirroring actual deployed files
	dist/		contains tarball of root (after "gmake dist")

cmd 	source files implementing executables, including servers and command
	line tools

demo 	demos

deps 	library dependencies (see below)

lib 	source files implementing library code, shared by multiple consumers

pkg	npm packaging metadata and scripts

tools 	miscellaneous tools, including:
		jsl - javascript lint
		jsstyle - javascript style checker based on OpenSolaris's cstyle
		ws - set up environment for running executables
		cadeploy, cadeploy-local - deploy to local and remote systems


DEPENDENCIES

The project depends on the following components that are assumed to be
installed already on both development and test machines:

	o python (for jsl only)
	o perl (for jsstyle only)
	o libpng
	o npm (for building packages)

The project also depends on the following bundled components:

	o node, in deps/node
	o node-amqp, a pure-JS node module in deps/node-amqp
	o node-heatmap, a pure-JS node module in deps/node-heatmap
	o node-kstat, a native node module in deps/node-kstat
	o node-libdtrace, a native node module in deps/node-libdtrace
	o node-png, a libpng wrapper in deps/node-png

To check these out, use

	# git submodule update --init

You should be able to build all of these with "gmake all" from the root.  If
necessary, you can build node and the native components (node-png, node-kstat,
node-libdtrace) manually using the standard procedures.  IMPORTANT: whether you
use "gmake all" or manually build the dependencies, check the output of the
"configure" stage to make sure that node-waf was able to find all the relevant
libraries, particularly for libpng.  If that step fails, it will successfully
build the module without the proper library dependencies, leaving you with an
unloadable module when you try to use the library.

Note that node-kstat will only build on Solaris since it requires libkstat.
node-libdtrace will build on both Solaris and MacOS.  The kstat and libdtrace
native libraries are only used by the instrumenter component.


DEMO

If you're not sure what to run first, try the 'basicvis' demo:

- Use the steps under "Running the Code" below to deploy to a system (e.g.,
  COAL-S or COAL-147).  Update demo/basicvis/caflot.js to point to the system
  you're running the configuration and aggregator services on, and then run:

	# node demo/basicvis/cademo.js

- On a machine where you have a web browser (i.e. your laptop), connect to
  http://HOST:23183/ where HOST is the system where you're running the demo.

- You should be able to create and delete graphs for the stats already
  supported, including scalars, decompositions, and heatmaps.


RUNNING THE CODE

To actually run code, you have three options:

(1) The most flexible method (typically used for development and testing) is to
    invoke:

	# tools/ws
	# node cmd/<source>.js

    The "ws" tool takes care of setting NODE_PATH appropriately to include all of
    our dependencies.  You can choose exactly what you need to run.

(2) If you find it more convenient to let SMF manage these services, or if you
    need to run on a different system (e.g., because you're developing on a
    local zone but want to run in a global zone), you can use tools/cadeploy to
    deploy services to HOST:

	# gmake dist
	# tools/cadeploy -s agg -s cfg -s inst -h HOST -f build/dist/dist.tar.gz

    This will copy the production files to /opt/smartdc/ca on the target system
    and import SMF services (smartdc/ca/ca*svc) for each of the configuration,
    aggregator, and instrumenter services.  You can rerun the same command to
    update the services running on the remote system.
    
    Remember to install libpng on the target system before doing this.

(3) When we actually start deploying this on CoaL and production systems, we'll
    be using npm packages.  This method will supersede the above deployment
    tool but it's not yet complete.  To use it:

    	# gmake pkg
	# scp build/pkg/cabase.tar.gz ...
	
	Then, wherever you copied the tarball:

	# npm install /path/to/cabase.tar.gz

    The only currently available package is "cabase", which delivers all of the
    code and SMF manifests, as well as "binaries" into your path to invoke the
    various commands and tools (including each of the three services).  In the
    future, we will have an additional package for each separately-deployed
    service.  These packages will depend on "cabase" and simply manage SMF
    services.


NOTES

All of the interfaces here including command names, arguments, tools, services,
paths, ports, and properties are Unstable and subject to change.

Checked in code should be lint-clean, jsstyle-clean, and code reviewed.  Each
line in a commit comment should contain a JIRA ticket number and description
and nothing else.

The "jsl" implementation here assumes a Solaris environment and several
Python-related paths.  It should work on a stock COAL-S global or local zone and
a stock COAL-147 local zone.

Dependencies are currently hardcoded in the Makefile.  If you add a new
dependency in deps, be sure to update the Makefile with the necessary targets to
install it into the proto root.

You can build a cscope database to browse the source with:

	# gmake xref

and you can use it with:

	# cscope -dq

The architecture, API, protocol, and other technical details are
described here:

    https://hub.joyent.com/wiki/display/dev/Introspection

Bugs should be reported in the INTRO (Introspection) bug category.
