OVERVIEW

This is the repo for the cloud-analytics project, including agents, daemons,
libraries, etc.  Project lead is Dave Pacheco (dap@joyent.com).

Subdirectories in this repo include:

build	(auto-generated by "gmake install")
	root/		(proto) subdirectory mirroring actual deployed files
	dist/		contains tarball of root (after "gmake dist")

cmd 	source files implementing executables, including servers and command
	line tools

demo 	demos

deps 	library dependencies (see below)

lib 	source files implementing library code, shared by multiple consumers

tools 	miscellaneous tools, including:
		jsl - javascript lint
		jsstyle - javascript style checker based on OpenSolaris's cstyle
		ws - set up environment for running executables
		cadeploy, cadeploy-local - deploy to local and remote systems


DEPENDENCIES

The project depends on the following components that are assumed to be
installed already on both development and test machines:

	o python (for jsl only)
	o perl (for jsstyle only)
	o libpng

The project also depends on the following bundled components:

	o node, in deps/node
	o node-amqp, a pure-JS node module in deps/node-amqp
	o node-heatmap, a pure-JS node module in deps/node-heatmap
	o node-kstat, a native node module in deps/node-kstat
	o node-libdtrace, a native node module in deps/node-libdtrace
	o node-png, a libpng wrapper in deps/node-png

To check these out, use

	# git submodule update --init

You should be able to build all of these with "gmake all" from the root.  If
necessary, you can build node and the native components (node-png, node-kstat,
node-libdtrace) manually using the standard procedures.  IMPORTANT: whether you
use "gmake all" or manually build the dependencies, check the output of the
"configure" stage to make sure that node-waf was able to find all the relevant
libraries, particularly for libpng.  If that step fails, it will successfully
build the module without the proper library dependencies, leaving you with an
unloadable module when you try to use the library.

Note that node-kstat will only build on Solaris since it requires libkstat.
node-libdtrace will build on both Solaris and MacOS.  The kstat and libdtrace
native libraries are only used by the instrumenter component.


RUNNING THE CODE

To run commands for testing, you can use:

	# tools/ws
	# node cmd/<source>.js

The "ws" tool takes care of setting NODE_PATH appropriately to include all of
our dependencies.

If you find it more convenient to let SMF manage these services, or if you need
to run on a different system (e.g., because you're developing on a local zone
but want to run in a global zone), use tools/cadeploy to deploy to HOST:

	# gmake dist
	# tools/cadeploy -s agg -s cfg -s inst -h HOST -f build/dist/dist.tar.gz

This will copy the production files to /opt/smartdc/ca on the target system and
import SMF services (smartdc/ca/ca*svc) for each of the configuration,
aggregator, and instrumenter services.  You can rerun the same command to update
the services running on the remote system.

Remember to install libpng on the target system.


DEMO

Try the 'basicvis' demo:

- Use the above steps to deploy to a system (e.g., COAL-S or COAL-147).  Update
  demo/basicvis/caflot.js to point to the system you're running the
  configuration and aggregator services on, and then run:

	# node demo/basicvis/cademo.js

- On a machine where you have a web browser (i.e. your laptop), connect to
  http://HOST:23183/ where HOST is the system where you're running the demo.

- You should be able to create and delete graphs for the stats already
  supported, including scalars, decompositions, and heatmaps.  Enjoy!


NOTES

All of the interfaces here including command names, arguments, tools, services,
paths, ports, and properties are Unstable and subject to change.

Checked in code should be lint-clean and jsstyle-clean.

The "jsl" implementation here assumes a Solaris environment and several
Python-related paths.  It should work on a stock COAL-S global or local zone and
a stock COAL-147 local zone.

Dependencies are currently hardcoded in the Makefile.  If you add a new
dependency in deps, be sure to update the Makefile with the necessary targets to
install it into the proto root.

You can build a cscope database to browse the source with:

	# gmake xref

and you can use it with:

	# cscope -dq

The architecture, API, protocol, and other technical details are
described here:

    https://hub.joyent.com/wiki/display/dev/Introspection

Bugs should be reported in the INTRO (Introspection) bug category.
