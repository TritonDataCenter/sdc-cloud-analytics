OVERVIEW

This is the repo for the cloud-analytics project, including agents, daemons,
libraries, etc.  Project lead is Dave Pacheco (dap@joyent.com).

Subdirectories in this repo include:

cmd
	source files implementing executables, including servers and command
	line tools

demo
	demos

deps
	library dependencies (see below)

lib
	source files implementing library code, shared by multiple consumers

tools
	miscellaneous tools, including:

		jsl - javascript lint
		jsstyle - javascript style checker based on OpenSolaris's cstyle
		ws - set up environment for running executables

You can build a cscope database to browse the source with:

	# make xref

and you can use it with:

	# cscope -dq


DEPENDENCIES

The project depends on the following components that are assumed to be
installed already on the dev/test machine:

	o python (for jsl only)
	o perl (for jsstyle only)
	o libpng

libpng is the only one not installed on a COAL-S zone by default.  You can
install it with:

	# pkgin install png

The project also depends on the following bundled components:

	o node, in deps/node
	o node-png, a libpng wrapper in deps/node-png
	o node-heatmap, a pure-JS node module in deps/node-heatmap
	o node-amqp, a pure-JS node module in deps/node-amqp
	o node-kstat, a native node module in deps/node-kstat
	o node-libdtrace, a native node module in deps/node-libdtrace

To check these out, use

	# git submodule update --init

Then build node:

	# cd deps/node
	# ./configure
	# make && make install

Then build the native modules.  For each $DEP of node-png, node-kstat, and
node-libdtrace:

	# cd deps/$DEP
	# node-waf configure && node-waf build && node-waf install

Note that node-kstat will only build on Solaris since it requires libkstat.
node-libdtrace will build on both Solaris and MacOS.  The kstat and libdtrace
native libraries are only used by the instrumenter component.


COMMANDS

To run commands, you generally use:

	# tools/ws
	# node cmd/<source>.js

The "ws" tool takes care of setting NODE_PATH appropriately to include all of
our dependencies.


DEMO

Try the 'basicvis' demo.  Start with COAL-S.

- Build dependencies as described above.

- Make sure HOST is set in your environment.  For example:

	# export HOST=$(hostname)

- Run tools/ws to set up NODE_PATH, then start up instances of the
  configsvc, aggregator, instrumenter, and demo server, in that order:

	# node cmd/caconfigsvc.js
	# node cmd/caaggsvc.js
	# node cmd/cainstsvc.js
	# node demo/basicvis/demo.js

- On a machine where you have a web browser (i.e. your laptop), connect to
  http://<COAL VM>:23183/.

- You should be able to create and delete graphs for the few stats
  already supported.  Enjoy!


NOTES

Checked in code should be lint-clean and jsstyle-clean.

The "jsl" implementation here assumes a Solaris environment and several
Python-related paths.  It should work on a stock COAL-S global or local zone
(as of November, 2010).


ADDITIONAL INFORMATION

The architecture, API, protocol, and other technical details are
described here:

    https://hub.joyent.com/wiki/display/dev/Introspection

Bugs should be reported in the INTRO (Introspection) bug category.
