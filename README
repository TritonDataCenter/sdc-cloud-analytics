OVERVIEW

This is the repo for the cloud-analytics project, including agents, daemons,
libraries, etc.  Project lead is Dave Pacheco (dap@joyent.com).


REPOSITORY

Subdirectories in this repo include:

bamboo		scripts used by the Bamboo continuous integration system
build		(auto-generated by "gmake install")
build/dist	release tarball
build/pkg	proto area for packages and package tarballs
cmd 		source files implementing executables (daemons and tools)
demo 		demos
demo/basicvis	reference CA web client
demo/tools	tools for demo'ing CA
deps 		library dependencies (see below)
lib 		source files implementing library code shared by multiple consumers
metadata	JSON metadata used to configure CA
pkg		npm packaging metadata and scripts
smf		SMF manifests and method scripts
tools 		miscellaneous tools
tools/jsl	javascript lint
tools/jsstyle	javascript style checker based on OpenSolaris's cstyle
tools/ws	set up environment for running executables
tools/catest	run CA test suite
tools/webrev	generate webrevs
tools/cadepsvcs	upgrade scripts
tools/caupsvcs
tools/caupagent
tst		automated tests

To browse the source, first build a cscope database with:

	# gmake xref

and then launch the cscope browser:

	# cscope -dq


DEVELOPMENT WORKFLOW

The only supported build environment is an SDC6 "smartos" zone.  Instructions
for setting up a development environment under SDC6 are here:

    https://hub.joyent.com/wiki/display/dev/Setting+up+Cloud+Analytics+development+on+COAL-147

All build commands use "gmake" since we rely on GNU make extensions not
supported by Solaris "make".

See "RUNNING THE CODE" below for instructions on building and testing your
built bits.  See "NOTES" before pushing changes.


DEPENDENCIES

The project depends on the following components that are assumed to be
installed already on both development and test machines:

	o python (for jsl only)
	o perl (for jsstyle only)
	o libpng
	o npm (for building packages)

These are all setup by the above instructions for setting up a build
environment.

The project also depends on the following bundled components:

	o node, in deps/node
	o connect, a pure-JS node module in deps/connect
	o node-amqp, a pure-JS node module in deps/node-amqp
	o node-heatmap, a pure-JS node module in deps/node-heatmap
	o node-kstat, a native node module in deps/node-kstat
	o node-libGeoIP, a native node module in deps/node-libGeoIP
	o node-libdtrace, a native node module in deps/node-libdtrace
	o node-png, a libpng wrapper in deps/node-png
	o node-uname, a SUSv3-based uname implementation

The build process should take care of initializing these submodules using "git
submodule update --init" and building the binaries.  IMPORTANT: when attempting
to build outside the normal build environment, be sure to check the output of
the "configure" stage to make sure that node-waf was able to find all the
relevant libraries, particularly for libpng.  If that step fails, it will
successfully build the module without the proper library dependencies, leaving
you with an unloadable module when you try to use the library.

Note that node-kstat will only build on Solaris since it requires libkstat.
node-libdtrace will build on both Solaris and MacOS.  The kstat and libdtrace
native libraries are only used by the instrumenter component.


DEMO

If you're not sure what to run first, try the 'basicvis' demo:

- Use the steps under "Running the Code" below to deploy to a system (e.g.,
  COAL-147).  Take note of the IP address on which you're running the
  configuration and aggregator services and then run:

	# node demo/basicvis/cademo.js -P <IPADDRESS>

- On a machine where you have a web browser (i.e. your laptop), connect to
  http://HOST:23183/ where HOST is the system where you're running the demo.

- You should be able to create and delete graphs for supported merics,
  including scalars, decompositions, and heatmaps.


RUNNING THE CODE

To actually run code, you have two options:

(1) Before pushing any changes, you should test the official upgrade mechanism.
    This is also necessary to test on a system other than the one you're
    developing on (which is necessary for work that requires running in the
    global zone, as some of the instrumenter metrics do).  This process is
    documented here:

        https://hub.joyent.com/wiki/display/dev/Upgrading+Cloud+Analytics

(2) During development, you can use this more flexible method:

	# tools/ws
	# node cmd/<source>.js

    The "ws" tool takes care of setting NODE_PATH appropriately to include all
    of our dependencies.  You can choose exactly what you need to run this way.


NOTES

Before checking code in:
  - run "gmake pbchk" to check for lint, style, and automated test errors
  - make sure that each line in the commit comment contains a JIRA ticket
    number, the ticket synopsis, and nothing else
  - if possible, get a code review

All of the interfaces here including command names, arguments, tools, services,
paths, ports, and properties are Unstable and subject to change.

The "jsl" implementation here assumes a Solaris environment and several
Python-related paths.  It should work on a stock COAL-147 local zone.

Dependencies are currently hardcoded in the Makefile.  If you add a new
dependency in deps, be sure to update the Makefile with the necessary targets to
install it into the proto root.

The architecture, API, protocol, and other technical details are
described here:

    https://hub.joyent.com/wiki/display/dev/Introspection

Bugs should be reported in the INTRO (Introspection) bug category.
