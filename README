OVERVIEW

This is the repo for the cloud-analytics project, including agents, daemons,
libraries, etc.  Project lead is Dave Pacheco (dap@joyent.com).

Subdirectories in this repo include:

cmd
	source files implementing executables, including servers and command
	line tools

demo
	demos

deps
	library dependencies (see below)

lib
	source files implementing library code, shared by multiple consumers

tools
	miscellaneous tools, including:

		jsl - javascript lint
		jsstyle - javascript style checker based on OpenSolaris's cstyle
		ws - set up environment for running executables

You can build a cscope database to browse the source with:

	# make xref

and you can use it with:

	# cscope -dq


DEPENDENCIES

The project depends on the following components that are assumed to be
installed already on the dev/test machine:

	o node, used by most components
	o python for jsl only
	o perl for jsstyle only

The project also depends on the following bundled components:

	o node-amqp, a pure-JS node module in deps/node-amqp
	o node-kstat, a native node module in deps/node-kstat
	o node-libdtrace, a native node module in deps/node-libdtrace

To check these out, use

	# git submodule update --init

Then build the native modules:

	# cd deps
	# cd node-kstat
	# node-waf configure && node-waf build && node-waf install
	# cd ..

	# cd node-libdtrace
	# node-waf configure && node-waf build && node-waf install

These will only build on Solaris, since they require native kstat and dtrace
libraries.  The native libraries are only used by the instrumenter component.


COMMANDS

To run commands, you generally use:

	# tools/ws
	# node cmd/<source>.js

The "ws" tool takes care of setting NODE_PATH appropriately.


DEMO

Try the 'basicvis' demo.  Start with COAL-S.

- Create a new zone (I'll call this 'devel') using the MCP API and set
  it up as usual (add ssh keys for yourself, etc.)

- Set up port forwarding for two HTTP ports to the new zone.  The
  easiest way to do this is to modify /root/coal4devs/gzone-ipnat.sh in
  the global zone to add this:

	echo $0: configuring HTTP pass-through to devel zone "(192.168.2.31)"
	cat >> /etc/ipf/ipnat.conf <<CONF
	rdr external0 192.168.3.7/32 port 23181 -> 192.168.2.31 port 23181 tcp
	map external0 from any to 192.168.2.31/32 port = 23181 -> 192.168.3.7/32
	rdr external0 192.168.3.7/32 port 23182 -> 192.168.2.31 port 23182 tcp
	map external0 from any to 192.168.2.31/32 port = 23182 -> 192.168.3.7/32
	CONF

  In this case, the zone's IP address is 192.168.2.31.  You'll have to
  fill in yours.  Then run this script.

- Checkout node (I'm using v0.3.1-pre) into the devel zone.  Build and
  install.

- Checkout this repo into the devel node.  Build as described above
  under "Dependencies".

- Run tools/ws to set up NODE_PATH, then start up instances of the
  configsvc, aggregator, and instrumenter, in that order:

	# node cmd/caconfigsvc.js
	# node cmd/caaggsvc.js
	# node cmd/cainstsvc.js

  Note that HOST must be set in the environment.  This should be set to the
  system's hostname, though it can be any identifier for the machine.  Note
  too that in production these services would run in a system's global zone
  and/or the head node but for testing we run them all in a local zone.

- On a machine where you have a web browser (i.e. your laptop), open up
  demo/basicvis/graph.htm.  Note that you may need to tweak the ports in
  demo/basicvis/graph.js if you used different ports above or if your
  VM's IP address is not 192.168.3.7.  (In the latter case you should
  have changed 192.168.3.7 in the above ipnat script, too.)

- You should be able to create and delete graphs for the few stats
  already supported.  Enjoy!


NOTES

Checked in code should be lint-clean and jsstyle-clean.

The "jsl" implementation here assumes a Solaris environment and several
Python-related paths.  It should work on a stock COAL-S zone, as of
November, 2010.


ADDITIONAL INFORMATION

The architecture, API, protocol, and other technical details are
described here:

    https://hub.joyent.com/wiki/display/dev/Introspection

Bugs should be reported in the INTRO (Introspection) bug category.
