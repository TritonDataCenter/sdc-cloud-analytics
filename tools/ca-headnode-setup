#!/bin/bash

#
# Run this script on the headnode to set up a local zone for developing Cloud
# Analytics.  The script takes a single argument: the desired username.
#

shopt -s xpg_echo

function fail
{
	local msg="$*"
	[[ -z "$msg" ]] && msg="failed"
	echo "$sh_arg0: $msg" >&2
	exit 1
}

function sh_extract_header
{
	egrep "^$1: " | sed -e "s#$1: ##" | tr -d '\r\n'
}

function sh_provision
{
        local cust=$1 dataset=$2
	local out turi conturi

        out=$($sh_mapicurlcmd -s -i -X POST -d dataset=$dataset \
	    -d package="regular_256" -d networks="admin" \
	    -d customer_uuid=$cust \
	    --url "$sh_mapi/zones" 2>&1)

        [[ $? -eq 0 ]] || fail "failed to create zone: $out"
	turi=$(echo "$out" | sh_extract_header X-Joyent-Transition-URI)
	[[ -n $turi ]] || fail "no transition URI: $out"

	while [[ -z $conturi ]]; do
		sleep 1
		out=$($sh_mapicurlcmd -s -i --url $sh_mapi$turi 2>&1)
        	[[ $? -eq 0 ]] || fail "failed to get transition: $out"
		conturi=$(echo "$out" | sh_extract_header Location)
		echo ".\c "
	done

	out=$($sh_mapicurlcmd $sh_curlopts $sh_mapi$conturi)
	sh_zonename=$(echo "$out" | json name)
	sh_zoneroot=/zones/$sh_zonename/root
	[[ -n $sh_zonename ]] || fail "no zone name: $out"
	sh_zoneip=$(echo "$out" | json ips.0.address)
	[[ -n $sh_zoneip ]] || fail "no zone ip: $out"
}

#
# Configuration
#
sh_arg0=$(basename $0)			# this script's name
sh_user="$1"				# desired username
sh_tmpbase=/var/tmp/$sh_arg0.$$		# temporary directory
sh_dataset_name=smartos			# dataset name to provision
sh_dataset_version=1.6.3		# desired version to provision
sh_zonename=				# provisioned zone's uuid
sh_zoneip=				# provisioned zone's IP
sh_zoneroot=				# provisioned zone's /
sh_zones="moray ufds ca adminui redis amon cloudapi portal"

sh_capi=				# CAPI client URL base
sh_capicurlcmd=				# curl command to call CAPI
sh_mapi=				# MAPI client URL base
sh_mapicurlcmd=				# curl command to call MAPI
sh_cust=				# admin user's customer uuid
sh_curlopts="-H 'Accept: application/json' -s"	# common curl options

[[ -n $sh_user ]] || fail "usage: $sh_arg0 <username>"

#
# The basic sequence of operations is as follows:
#
# - mark headnode provisionable
# - use sdc-setup to set up common zones (requires provisionable headnode)
# - load SDC configuration (which isn't complete until we've run sdc-setup)
# - provision the development zone and wait for it to boot
# - setup the zone (create user and install packages)
#
echo "Marking headnode provisionable ... \c "
sdc-compnode -c headnode -r false || fail "failed"
echo "done."

echo "Provisioning cloud services ... \c "
sdc-setup -c headnode -r $sh_zones || fail "failed"
echo "done."

echo "Loading SDC configuration ... \c "
[[ -f /lib/sdc/config.sh ]] || fail "Missing /lib/sdc/config.sh"
. /lib/sdc/config.sh
load_sdc_config

sh_capi="${CONFIG_capi_client_url}"
sh_capicurlcmd="curl -u ${CONFIG_capi_http_admin_user}"
sh_capicurlcmd="$sh_capicurlcmd:${CONFIG_capi_http_admin_pw}"

sh_mapi="${CONFIG_mapi_client_url}"
sh_mapicurlcmd="curl -u ${CONFIG_mapi_http_admin_user}"
sh_mapicurlcmd="$sh_mapicurlcmd:${CONFIG_mapi_http_admin_pw}"
echo "done."

echo "Retrieving admin customer uuid ... \c "
sh_cust=$($sh_capicurlcmd $sh_curlopts $sh_capi/customers | json 0.uuid)
[[ -n $sh_cust ]] || fail "not found"
echo "$sh_cust"

echo "Provisioning $sh_dataset_name-$sh_dataset_version zone ... \c "
sh_provision $sh_cust "$sh_dataset_name-$sh_dataset_version" || fail "failed"
echo "$sh_zonename ($sh_zoneip)"

#
# Work around PROV-487.  The zone may be booted, but it might be running
# zoneinit, after which it will reboot.  We need to wait for this second boot
# before trying to log in.  We separately wait for the reboot to complete and
# then for logins to work again.  We check for network connectivity to make
# sure that when we run our real setup script later it can assume a working
# network environment.
#
echo "Waiting for zone $sh_zonename to reboot ... \c "
while zlogin $sh_zonename pgrep -x reboot > /dev/null 2>&1; do
	echo ".\c "
	sleep 1
done
echo " done."

echo "Waiting for zone $sh_zonename to boot (+ net) ... \c "
while ! zlogin $sh_zonename ping 8.8.8.8 > /dev/null 2>&1; do
	echo ".\c "
	sleep 1
done
echo " done."

echo "Creating $sh_user's home directory ... \c "
mkdir -p $sh_zoneroot/home/$sh_user/.ssh || fail "failed to mkdir"

cat > $sh_zoneroot/home/$sh_user/.profile <<PROFILE
export PATH=/opt/local/bin:/usr/bin:/usr/sbin:/usr/sfw/bin:/usr/xpg4/bin
export MANPATH=/opt/local/man:/opt/local/share/man:/usr/share/man
PROFILE
echo "done."

if [[ -f /root/.ssh/authorized_keys ]]; then
	echo "Setting up ssh keys for $sh_user ... \c "
	cp /root/.ssh/authorized_keys $sh_zoneroot/home/$sh_user/.ssh || \
	    fail "failed to copy /root/.ssh/authorized_keys"
	chmod 600 $sh_zoneroot/home/$sh_user/.ssh/authorized_keys
	echo "done."
fi

cat > $sh_zoneroot/root/setup_zone.sh <<EOF
#!/bin/bash
shopt -s xpg_echo

function fail
{
	echo "\$*"
	exit 1
}

echo "Creating user '$sh_user' ... \c "
if egrep ^$sh_user: /etc/passwd > /dev/null; then
	echo "skipped (already exists)"
else
useradd -c $sh_user -d /home/$sh_user -G staff -s /bin/bash \
    -K defaultpriv=basic,dtrace_user,dtrace_proc,sys_mount,hyprlofs_control \
    $sh_user || fail "failed to create user"
passwd -N $sh_user > /dev/null || fail "passwd -N failed for $sh_user"
chown -R $sh_user:staff /home/$sh_user || fail "failed to chmod"
echo "done."
fi

#
# binutils (which we want for c++filt) is a superset of gcc-tools, but you
# cannot have both of these packages installed at the same time.  gcc-compiler
# depends on gcc-tools, but it will successfully install as long as binutils is
# installed first.
#
export PATH=/opt/local/bin:$PATH
echo "Setting up pkgsrc and packages ... \c "
pkgin -f update > /var/tmp/pkgin_update.out || fail "failed"
pkgin -y in binutils > /var/tmp/pkgin_install.out || fail "failed"
pkgin -y in gcc-compiler gcc-runtime cscope pkg-config gmake scmgit python26 \
    png GeoIP GeoLiteCity ghostscript >> /var/tmp/pkgin_install.out || \
    fail "failed"
echo "done."
EOF

chmod +x $sh_zoneroot/root/setup_zone.sh
zlogin $sh_zonename /root/setup_zone.sh || fail

echo "Setup complete for zone $sh_zonename at $sh_zoneip."
