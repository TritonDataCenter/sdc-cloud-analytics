#!/bin/bash

#
# recreate-zone: given a headnode zone role (e.g., "ca") and a tarball for that
#   zone's filesystem, destroy the first existing zone for that role and
#   recreate it based on the new tarball.  Future zones created with that role
#   will also use the new tarball.
#
# For example:
#
#    # recreate-zone ca /var/tmp/ca-pkg-master.tar.bz2
#
# would destroy the existing "ca0" zone and recreate it using the given
# filesystem tarball.
#

shopt -s xpg_echo

function fail
{
	echo "$*" >&2
	exit 1
}

function usage
{
	[[ $# -gt 0 ]] && echo "error: $*"
	echo "usage: $rcz_arg0 <zone role> <path to new tarball>" >&2
	exit 2
}

rcz_arg0="$(basename $0)"
rcz_zonerole=$1
rcz_tarball=$2

[[ -n "$rcz_zonerole" ]] || usage
[[ -n "$rcz_tarball" ]] || usage
[[ -f "$rcz_tarball" ]] || usage "not a regular file: $rcz_tarball"

echo "Loading admin uuid ... \c"
. /lib/sdc/config.sh || fail "failed to load config.sh"
load_sdc_config || fail "failed to load SDC config"
rcz_admin_uuid=${CONFIG_ufds_admin_uuid}
[[ -n $rcz_admin_uuid ]] || fail "failed to load admin user UUID"
echo $rcz_admin_uuid

echo "Lookup for existing zone with role \"${rcz_zonerole}0\" ... \c"
rcz_zonename=$(vmadm lookup -1 owner_uuid=${rcz_admin_uuid} \
    tags.smartdc_role=${rcz_zonerole}) || fail "NO ZONE FOUND"
[[ -n $rcz_zonename ]] || fail "NO ZONE FOUND"
echo "$rcz_zonename"

rcz_dst=/usbkey/zones/$rcz_zonerole/fs.tar.bz2
echo "Copying tarball to $rcz_dst ... \c"
[[ -f $rcz_dst ]] || fail "destination ($rcz_dst) not a regular file"
cp $rcz_tarball $rcz_dst || fail "FAILED"
echo "done."

echo "Removing existing zone ($rcz_zonename) ... \c"
sdc-role destroy ${rcz_zonerole}0 || fail "FAILED"
echo "done."

echo "Recreating zone with role \"$rcz_zonerole\" ... \c"
sdc-role create $rcz_zonerole || fail "FAILED"
echo "done."
