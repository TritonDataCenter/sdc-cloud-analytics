/*
 * dbggen.js: given the heap object constants generated for a particular
 *     libv8.so binary (heap-dbg-constants.h) and the heap class definitions in
 *     the V8 source (objects.h), output a C file describing the heap classes
 *     and their fields.
 */

var mod_assert = require('assert');
var mod_fs = require('fs');
var mod_path = require('path');
var mod_sys = require('sys');

var srcdir = mod_path.dirname(process.argv[1]);
var fname_objects, fname_constants;

/*
 * The following regex extracts a class name and its parent class from
 * objects.h.  This regex obviously isn't totally general, but we happen to not
 * care about the classes whose declarations don't match it.
 */
var class_regex = /^\s*class\s*(\w+)(\s*:\s*public\s*(\w+))?\s*{\s*$/;

/*
 * The following regex parses constants defined in heap-dbg-constants.h, each of
 * which defines the in-memory offset for each field in each class.
 */
var const_regex =
    /^#define\tV8_OFF_([^_\s]+)_(\S+)\s+\(V8_OFF_HEAP\((0x[abcdefABCDEF\d]+)\)\)/;

var code_header = [
    '/*',
    ' * autogenerated file: describes V8 heap objects for programmatic ',
    ' * inspection.',
    ' */',
    '',
    '#include "heap-dbg-common.h"',
    '#include "heap-dbg-constants.h"',
    ''
].join('\n');

/*
 * Program state
 */
var kname = {};		/* uppercase class name -> real class name */
var pclass = {};	/* class name -> parent class name */
var fields = {};	/* class -> field name -> offset */
var klasses = [];	/* class names sorted by depth in hierarchy */

/*
 * Initialize "pclass" from objects.h.
 */
function load_hierarchy()
{
	var data, lines;

	data = mod_fs.readFileSync(fname_objects);
	lines = data.toString().split('\n');

	lines.forEach(function (line) {
		var match;

		if (!(match = line.match(class_regex)))
			return;

		if (!match[3])
			return;

		pclass[match[1]] = match[3];
		kname[match[1].toUpperCase()] = match[1];
	});
}

/*
 * Initialize "fields" from heap-dbg-constants.h.
 */
function load_constants()
{
	var data, lines;

	data = mod_fs.readFileSync(fname_constants);
	lines = data.toString().split('\n');

	lines.forEach(function (line) {
		var match, klass, field, offset;

		if (!(match = line.match(const_regex)))
			return;

		if (!(match[1] in kname))
			return;

		klass = kname[match[1]];
		field = match[2].toLowerCase();
		offset = parseInt(match[3]);

		if (!(fields[klass]))
			fields[klass] = {};

		fields[klass][field] = offset;
	});
}

/*
 * Initialize "klasses" with the list of class names sorted by depth.
 */
function sort_classes()
{
	var remaining = {};
	var current = {};
	var klass;

	/*
	 * Initialize "remaining" with the set of all classes and "current" with
	 * the set of classes with no parent (roots in the hierarchy).
	 */
	for (klass in pclass) {
		remaining[klass] = true;
		remaining[pclass[klass]] = true;

		if (pclass[klass] in pclass)
			continue;

		current[pclass[klass]] = true;
	}

	klasses = [];

	do {
		for (klass in current) {
			klasses.push(klass);
			delete (remaining[klass]);
		}

		current = {};
		for (klass in remaining) {
			if (pclass[klass] in remaining)
				continue;

			current[klass] = true;
		}
	} while (!is_empty(current));
	
	mod_assert.ok(is_empty(remaining));
	mod_assert.ok(is_empty(current));
}

function emit_data()
{
	console.log(code_header);

	klasses.forEach(emit_class);

	console.log('');
	console.log('v8_class_t *v8_classes[] = {');
	klasses.forEach(function (klass) {
		console.log('\t&v8_%s_class,', klass);
	});
	console.log('\tNULL');
	console.log('};\n');
}

function emit_class(klass)
{
	var fieldnames;

	if (klass in fields)
		fieldnames = Object.keys(fields[klass]).sort(function (f1, f2) {
			return (fields[klass][f1] - fields[klass][f2]);
		});
	else
		fieldnames = [];

	console.log('/* %s class */', klass);
	console.log('v8_field_t v8_%s_fields[] = {', klass);
	fieldnames.forEach(function (fieldname) {
		console.log('\t{ "%s", V8_OFF_%s_%s, sizeof (uintptr_t) },',
		    fieldname, klass.toUpperCase(), fieldname.toUpperCase());
	});
	console.log('\t{ NULL }');
	console.log('};\n');

	console.log([
	    'v8_class_t v8_%s_class = {',
	    '\t"%s", %s, v8_%s_fields',
	    '};\n'
	    ].join('\n'), klass, klass,
	    pclass[klass] ? '&v8_' + pclass[klass] + '_class' : 'NULL', klass);
}

function main()
{
	if (process.argv.length < 4) {
		console.log('usage: node dbggen /path/to/objects.h ' +
		    '/path/to/heap-dbg-constants.h');
		process.exit(2);
	}

	fname_objects = process.argv[2];
	fname_constants = process.argv[3];

	load_hierarchy();
	load_constants();
	sort_classes();
	emit_data();
}

function starts_with(str, prefix)
{
	if (str.length < prefix.length)
		return (false);

	return (str.substring(0, prefix.length) == prefix);
}

function is_empty(obj)
{
	var key;

	for (key in obj)
		return (false);

	return (true);
}

main();
