/*
 * heap-dbg-common.h: structure, constant, and macro definitions for use by
 *   V8 heap inspection tools.  These declarations are used in conjunction with
 *   the heap-dbg-inl.h file that's generated as part of the build process to
 *   describe the layout of heap objects for a particular version of V8.
 */

#ifndef HEAPDBG_COMMON_H
#define	HEAPDBG_COMMON_H

typedef struct v8_class {
	const char *v8c_name;		/* heap object class name */
	struct v8_class *v8c_parent;	/* parent class (inheritance) */
	struct v8_field *v8c_fields;	/* array of class fields */
	size_t v8c_start;		/* offset of first class field */
	size_t v8c_end;			/* offset of first subclass field */
} v8_class_t;

typedef struct v8_field {
	const char 	*v8f_name;	/* field name */
	const size_t	v8f_offset;	/* field offset */
	const size_t	v8f_size;	/* field size */
} v8_field_t;

/*
 * Hardcoded classes, fields, and types for V8 heap objects.
 * XXX These should eventually be generated by the V8 build process.
 */
#define	V8_TYPE_NOTSTRING		0x80	/* FIRST_NONSTRING_TYPE */

#define	V8_MASK_SMI_TAG			0x1	/* kSmiTagMask */

#define	V8_MASK_HEAPOBJECT_TAG		0x3	/* kHeapObjectTagMask */
#define	V8_TAG_HEAPOBJECT		0x1	/* kHeapObjectTag */
#define	V8_TAG_FAILURE			0x3	/* kFailureTag */

#define	V8_MASK_STRENC			0x4	/* kStringEncodingMask */
#define	V8_TAG_STRENC_ASCII		0x4	/* kAsciiStringTag */

#define	V8_MASK_STRREP			0x3	/* kStringRepresentationMask */
#define	V8_TAG_STRREP_SEQ		0x0	/* kSeqStringTag */
#define	V8_TAG_STRREP_CONS		0x1	/* kConsStringTag */
#define	V8_TAG_STRREP_EXT		0x2	/* kExternalStringTag */

/* See JavaScriptFrameConstants::kFunctionOffset. */
#define	V8_OFF_FP_FUNCTION		(-0x8)

/*
 * Recall that while V8 heap objects are always 4-byte aligned, heap object
 * pointers always have the last bit set.  Rather than modify the pointers
 * everywhere we use them, we provide the V8_OFF_HEAP macro to adjust the offset
 * definitions (as V8 does internally -- see the READ_FIELD() and FIELD_ADDR()
 * macros in v8/src/objects-inl.h.)
 */
#define	V8_OFF_HEAP(x)			((x) - V8_TAG_HEAPOBJECT)

#include <sys/types.h>

typedef uintptr_t Smi;

#endif
