/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

/*
 * This test verifies that multiple clean statements are generated by metad.
 */

var mod_metad = require('../../lib/ca/ca-metad.js');
var mod_metric = require('../../lib/ca/ca-metric.js');
var mod_tl = require('../../lib/tst/ca-test');
var mod_assert = require('assert');
var ASSERT = mod_assert.ok;

var desc = {
	module: 'ff',
	stat: 'vi',
	fields: [ 'terra', 'celes' ],
	metad: {
	    probedesc: [
		{
			probes: [ 'syscall:::entry' ],
			gather: {
				terra: {
					gather: 'timestamp',
					store: 'thread'
				},
				celes: {
					gather: 'vtimestamp',
					store: 'thread'
				}
			}
		},
	       {
			probes: [ 'syscall:::return' ],
			aggregate: {
				default: 'count()',
				terra: 'quantize($0)',
				celes: 'quantize($0)'
			},
			transforms: {
				terra: 'timestamp - $0',
				celes: 'timestamp - $0'
			},
			verify: {
				terra: '$0',
				celes: '$0'
		       }
	       },
	       {
			probes: [ 'syscall:::return' ],
			clean: {
				terra: '$0'
			}
	       },
	       {
			probes: [ 'syscall:::return' ],
			clean: {
				terra: '$0',
				celes: '$0'
			}
	       }
	    ]
	}
};

var metadata = new mod_metric.caMetricMetadata();
metadata.addFromHost({
	modules: { ff: { label: 'Final Fantasy' } },
	types: { number: {arity: 'numeric' } },
	fields: {
		terra: { label: 'Terra Bradford', type: 'number' },
		celes: { label: 'Celes Chere', type: 'number' }
	},
	metrics: [ {
		module: 'ff',
		stat: 'vi',
		label: 'ff vi',
		unit: 'characters',
		fields: [ 'terra', 'celes' ]
	} ]
}, 'in-core');
mod_assert.deepEqual(metadata.problems(), []);

var cases = [
    {
	is_module: 'ff',
	is_stat: 'vi',
	is_predicate: {},
	is_decomposition: []
    }, {
	is_module: 'ff',
	is_stat: 'vi',
	is_predicate: {},
	is_decomposition: [ 'celes' ]
    }, {
	is_module: 'ff',
	is_stat: 'vi',
	is_predicate: {},
	is_decomposition: [ 'terra' ]
    }, {
	is_module: 'ff',
	is_stat: 'vi',
	is_predicate: {},
	is_decomposition: [ 'celes', 'terra' ]
    }
];

function main() {
	var ii, jj, res;
	mod_metad.mdValidateMetaD(desc);
	for (ii = 0; ii < cases.length; ii++) {
		res = mod_metad.mdGenerateDScript(desc, cases[ii], metadata);
		ASSERT('scripts' in res);
		for (jj = 0; jj < res['scripts'].length; jj++)
			process.stdout.write(res['scripts'][jj]);
		process.stdout.write('----\n\n');
	}
}

main();
